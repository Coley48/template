// 变量
@color:#fff;

*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  user-select: none;
  list-style: none;
}
html,body{
  width: 100%;
  height: 100%;
}
// 嵌套
body{
  background: url(../img/background.jpg) center no-repeat;
  background-size: cover;
  background-attachment: fixed;

  h1{
      color: @color;
      position: relative;
      background-color: lightblue;

      &::after{
        content: "";
        position: absolute;
        left: 0;
        top: 100%;
        width: 40px;
        height: 40px;
        background:url(../img/logo.svg) center no-repeat;
        background-size: cover;
      }
  }

  .example {
    display: grid;
    transition: all .5s;
    background: linear-gradient(to bottom, white, black);
    animation: hello 1s infinite ease-in-out 2s;
  }
}

// 扩展
.a.class,
.class > .a {
  color: lightblue;
}
.text:extend(.class all) {
    font-size: large;
    text-align: center;
}

.link:hover {
  color: lightcoral;
}

.bucket {
  background-color: lightcyan;
  position: absolute;
  top: 0;
  left: 0;
}
@{variable}:extend(.bucket) {
    float: left;
}
@variable: .selector;

.alert-info,
.widget {
    transition: all 2s ease;
}

.alert:extend(.alert-info, .widget) {
    font-family: 'Courier New', Courier, monospace;
}

// 混合
// 不输出
.no-output-mixin() {
  display: inline-block;
  font-size: 0;
  &:hover {
    border: 1px solid red;
  }
}
.mixin-1 {
  .no-output-mixin;
}
.mixin-2 {
  .no-output-mixin;
}
// 输出
.output-mixin, #id-output-mixin {
  color: red;
}
.mixin-class {
  .output-mixin();
}
.mixin-id {
  #id-output-mixin();
}

// 归并
// +
.merge-addition() {
  box-shadow+: inset 0 0 10px #555;
}
.addition {
  .merge-addition();
  box-shadow+: 0 0 20px black; 
}

.merge-space(){
  transform+_: translate(10%,10%);
}
.space{
  .merge-space();
  transform+_: rotate(180deg);
}

// important + 函数（参数使用逗号或分号分隔）
.foo (@bg: #f5f5f5; @color: #999) {
  background: @bg;
  color: @color;
}
.unimportant {
  .foo(#ff0);
}
.important {
  .foo() !important;
}

// 函数重载：调用所有可以调用的
.mixin(@color) {
  color: @color;
}
.mixin(@color; @padding: 2px) {
  background-color: @color*2;
  padding: @padding;
}
.mixin(@color; @padding; @margin: 20px) {
  color: @color;
  padding: @padding;
  margin: @margin @margin @margin @margin;
}
.some .selector div {
  .mixin(lightgrey);
}
// @arguments
.box-shadow(@x: 0; @y: 0; @blur: 1px; @color: #000) {
  -webkit-box-shadow: @arguments;
     -moz-box-shadow: @arguments;
          box-shadow: @arguments;
}
.big-block {
  .box-shadow(2px; 5px);
}
// @rest
.mixin-rest(@a; @rest...) {
   // @rest is bound to arguments after @a
   // @arguments is bound to all arguments
}
// @switch 条件
.mixin-switch(dark; @color) {
  color: darken(@color, 10%);
}
.mixin-switch(light; @color) {
  color: lighten(@color, 10%);
}
.mixin-switch(@_; @color) {
  display: block;
}

@switch: light;

.class {
  .mixin-switch(@switch; #888);
}

// @return
.average(@x, @y) {
  @result: ((@x + @y) / 2);
}

div {
  // call a mixin and look up its "@result" value
  padding: .average(16px, 50px)[@result];
}

// 递归
.loop(@counter) when (@counter > 0) {
  .loop((@counter - 1));    // next iteration
  width: (10px * @counter); // code for each iteration
}

div {
  .loop(5); // launch the loop
}

.generate-columns(4);

.generate-columns(@n, @i: 1) when (@i =< @n) {
  .column-@{i} {
    width: (@i * 100% / @n);
  }
  .generate-columns(@n, (@i + 1));
}

// 条件编译
@media: mobile;

.mixin(@a) when (@media = mobile) {  }
.mixin(@a) when (@media = desktop) {  }

.max(@a; @b) when (@a > @b) { width: @a }
.max(@a; @b) when (@a < @b) { width: @b }

// .mixin(@a; @b: 0) when (isnumber(@b)) { ... }
// .mixin(@a; @b: black) when (iscolor(@b)) { ... }

#theme.navbar {
  .colors(light) {
    primary: white;
    secondary:lightgrey;
  }
  .colors(dark) {
    primary: black;
    secondary: grey;
  }
}

.navbar {
  @colors: #theme.navbar.colors(light);
  background: @colors[primary];
  border: 1px solid @colors[secondary];
}


#library() {
  .rules() {
    background: lightgreen;
  }
}
.box {
  @rules:#library.rules();
  @rules();
  @alias: #library.colors;
  @{alias} {
    font-weight: normal;
  }
}

@my-option:true;
& when (@my-option = true) {
  button {
    background-color: whitesmoke;
  }
  a {
    background-color: lightblue;
  }
}

@detached-ruleset: { background: red; }; // semi-colon is optional in 3.5.0+
// use detached ruleset
.bottom {
    @detached-ruleset(); 
}

@func: if(@my-option = true, {
  button {
    color: white;
  }
  a {
    color: lightcyan;
  }
});
@func();

.desktop-and-old-ie(@rules) {
  @media screen and (min-width: 1200px) { @rules(); }
  html.lt-ie9 &                         { @rules(); }
}

header {
  background-color: blue;

  .desktop-and-old-ie({
    background-color: red;
  });
}

@config: {
  @dark: {
    primary: darkblue;
  }
  @light: {
    primary: lightblue;
  }
}

.box {
  @lookup: dark;
  color: @config[@@lookup][primary];
}


// Syntax: @import (keyword) "filename";

// The following import options have been implemented:

// reference: use a Less file but do not output it
// inline: include the source file in the output but do not process it
// less: treat the file as a Less file, no matter what the file extension
// css: treat the file as a CSS file, no matter what the file extension
// once: only include the file once (this is default behavior)
// multiple: include the file multiple times
// optional: continue compiling when file is not found


.clearfix {
  display: block;
  zoom: 1;

  &:after {
    content: " ";
    display: block;
    font-size: 0;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}